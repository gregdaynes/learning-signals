Learning Signals
================

The goal of this is to demonstrate how signals can be implemented without a framework
like React, Vue, Solid, etc. 

Inspired to learn more about them from Ben Lesh's talk at DotJS 2024[^1].

---

Signals are one way to create a reactive system in JavaScript. The technique is similar to pub/sub or observers, where a registry of listeners is maintained and called when the setter is called.

When the setter is called, the current state is updated, and the listeners are called. State is not passed to the listeners, but the listeners can access the state directly through the defined getter method created from initialization.


References
----------

[Implementing Signals from Scratch](https://dev.to/ratiu5/implementing-signals-from-scratch-3e4c)
[Making Web Components reactive](https://www.horuskol.net/blog/2022-04-12/making-web-components-reactive/)
[Signals: Fine-grained Reactivity for JavaScript Frameworks](https://www.sitepoint.com/signals-fine-grained-javascript-framework-reactivity/)
[Obersver Pattern](https://en.wikipedia.org/wiki/Observer_pattern)
[Deep Dive Into How Signals Work In SolidJS](https://www.thisdot.co/blog/deep-dive-into-how-signals-work-in-solidjs)
[TC39 Proposal Signals](https://github.com/tc39/proposal-signals)
[^1]: [Ben Lesh DotJS 2024](https://www.youtube.com/watch?v=txVeRpN_870)
